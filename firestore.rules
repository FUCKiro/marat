rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user exists
    function userExists() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Helper function to get user data
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Helper function to check if this is the first user
    function isFirstUser() {
      return !exists(/databases/$(database)/documents/users/**);
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return userExists() && getUserData().role == 'admin';
    }
    
    // Helper function to check if user is operator
    function isOperator() {
      return userExists() && getUserData().role == 'operator';
    }
    
    match /users/{userId} {
      allow read: if request.auth != null && 
        (isAdmin() || isOperator() || request.auth.uid == userId);
      
      // Allow create if:
      // 1. This is the first user (they become admin)
      // 2. Or if the current user is an admin
      // 3. And the new user's role is valid
      allow create: if request.auth != null &&
        (isFirstUser() || isAdmin()) &&
        (request.resource.data.role in ['admin', 'operator', 'patient']);
      
      // Allow update/delete if user is admin
      allow update, delete: if request.auth != null && isAdmin();
    }
    
    match /visits/{visitId} {
      allow read: if request.auth != null && 
        (isAdmin() || 
         isOperator() || 
         resource.data.patientId == request.auth.uid);
      
      allow write: if request.auth != null && 
        (isAdmin() || isOperator()) &&
        (
          // For create operations
          (request.resource.data.operatorId == request.auth.uid) ||
          // For update/delete operations
          (resource.data.operatorId == request.auth.uid)
        );
    }
  }
}