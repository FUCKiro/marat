rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user exists
    function userExists() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Helper function to get user data
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Helper function to check if this is the first user (becomes admin)
    function isFirstUser() {
      return !exists(/databases/$(database)/documents/users/**);
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return userExists() && getUserData().role == 'admin';
    }
    
    // Helper function to check if user is operator
    function isOperator() {
      return userExists() && getUserData().role == 'operator';
    }
    
    // Helper function to check if user has admin or operator role
    function isAdminOrOperator() {
      return userExists() && (getUserData().role == 'admin' || getUserData().role == 'operator');
    }
    
    match /users/{userId} {
      // Allow read access to:
      // - Admins and operators (can read all users)
      // - Users can read their own data
      allow read: if request.auth != null && 
        (isAdminOrOperator() || request.auth.uid == userId);
      
      // Allow create ONLY if:
      // 1. This is the first user (they become admin automatically)
      // 2. OR if the current user is an admin creating new users
      allow create: if request.auth != null &&
        (
          // First user becomes admin
          (isFirstUser() && request.resource.data.role == 'admin') ||
          // ONLY admin can create any type of user
          (isAdmin() && request.resource.data.role in ['admin', 'operator', 'patient'])
        );
      
      // Allow update ONLY if user is admin or updating their own data
      allow update: if request.auth != null && 
        (isAdmin() || request.auth.uid == userId);
      
      // Only admins can delete users
      allow delete: if request.auth != null && isAdmin();
    }
    
    match /visits/{visitId} {
      // Allow read access to:
      // - Admins and operators (can read all visits)
      // - Patients can read their own visits
      allow read: if request.auth != null && 
        (isAdminOrOperator() || 
         resource.data.patientId == request.auth.uid);
      
      // Allow write access to:
      // - Admins (can manage all visits)
      // - Operators (can manage visits they created)
      allow write: if request.auth != null && 
        (
          isAdmin() ||
          (isOperator() && request.resource.data.operatorId == request.auth.uid)
        );
    }
    
    match /therapyPrices/{priceId} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;
      
      // Allow write access only to admin and operators
      allow write: if request.auth != null && isAdminOrOperator();
    }
    
    match /invoices/{invoiceId} {
      // Allow read access to:
      // - Admins and operators (can read all invoices)
      // - Patients can read their own invoices
      allow read: if request.auth != null && 
        (isAdminOrOperator() || 
         (userExists() && resource.data.patientId == request.auth.uid));
      
      // Allow write access only to admin and operators
      allow write: if request.auth != null && isAdminOrOperator();
    }
  }
}